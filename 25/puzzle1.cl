(load "shared.cl")

(defun eastward (before &optional (next (copy-seq before)))
   (defun elementwise (i e &optional (x (i->x i)) (y (i->y i)) ni)
      (unless (eq e :>)
         (return-from elementwise nil))
      (setf x (x-correct (succ x)))
      (setf ni (xy->i x y))
      (ifn (eq (aref before ni) :.)
         (rotatef (aref next i) (aref next ni))
         (inc *moved*)))
   (vec-forieach 'elementwise before)
   next)

(defun southward (before &optional (next (copy-seq before)))
   (defun elementwise (i e &optional (x (i->x i)) (y (i->y i)) ni)
      (unless (eq e :v)
         (return-from elementwise nil))
      (setf y (y-correct (succ y)))
      (setf ni (xy->i x y))
      (ifn (eq (aref before ni) :.)
         (rotatef (aref next i) (aref next ni))
         (inc *moved*)))
   (vec-forieach 'elementwise before)
   next)

(defun age ()
   (setf *moved* 0)
   (setf *cqkmbr* (southward (eastward *cqkmbr*)))
   (inc *generation*)
   nil)

; (print-cqkmbr "initial")
(loop
   (age)
   ; (print-cqkmbr)
   (if (= 0 *moved*) (return)))

(format t "last generation: ~D~%" *generation*)

(exit)
